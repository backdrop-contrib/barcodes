<?php

/**
 * @file
 * Contains barcodes.module.
 */

 /**
 * Implements hook_autoload_info().
 */
function barcodes_autoload_info(){
  return array(
    'Com\Tecnick\Barcode\Barcode' => 'libraries/Tecnick/Barcode/Barcode.php',
    'Com\Tecnick\Barcode\Exception' => 'libraries/Tecnick/Barcode/Exception.php',
    'Com\Tecnick\Barcode\Type' => 'libraries/Tecnick/Barcode/Type.php',
    'Com\Tecnick\Barcode\Type\Convert' => 'libraries/Tecnick/Barcode/Type/Convert.php',
    'Com\Tecnick\Barcode\Type\Linear' => 'libraries/Tecnick/Barcode/Type/Linear.php',
    'Com\Tecnick\Barcode\Type\Raw' => 'libraries/Tecnick/Barcode/Type/Raw.php',
    'Com\Tecnick\Barcode\Type\Square' => 'libraries/Tecnick/Barcode/Type/Square.php',
    'Com\Tecnick\Barcode\Type\Linear\Codabar' => 'libraries/Tecnick/Barcode/Type/Linear/Codabar.php',
    'Com\Tecnick\Barcode\Type\Linear\CodeOneTwoEight' => 'libraries/Tecnick/Barcode/Type/Linear/CodeOneTwoEight.php',
    'Com\Tecnick\Barcode\Type\Linear\CodeThreeNine' => 'libraries/Tecnick/Barcode/Type/Linear/CodeThreeNine.php',
    'Com\Tecnick\Barcode\Type\Linear\EanTwo' => 'libraries/Tecnick/Barcode/Type/Linear/EanTwo.php',
    'Com\Tecnick\Barcode\Type\Linear\InterleavedTwoOfFive' => 'libraries/Tecnick/Barcode/Type/Linear/InterleavedTwoOfFive.php',
    'Com\Tecnick\Barcode\Type\Linear\Pharma' => 'libraries/Tecnick/Barcode/Type/Linear/Pharma.php',
    'Com\Tecnick\Barcode\Type\Linear\Raw' => 'libraries/Tecnick/Barcode/Type/Linear/Raw.php',
    'Com\Tecnick\Barcode\Type\Linear\UpcA' => 'libraries/Tecnick/Barcode/Type/Linear/UpcA.php',
    'Com\Tecnick\Barcode\Type\Linear\CodeNineThree' => 'libraries/Tecnick/Barcode/Type/Linear/CodeNineThree.php',
    'Com\Tecnick\Barcode\Type\Linear\CodeThreeNineCheck' => 'libraries/Tecnick/Barcode/Type/Linear/CodeThreeNineCheck.php',
    'Com\Tecnick\Barcode\Type\Linear\EanEight' => 'libraries/Tecnick/Barcode/Type/Linear/EanEight.php',
    'Com\Tecnick\Barcode\Type\Linear\Imb' => 'libraries/Tecnick/Barcode/Type/Linear/Imb.php',
    'Com\Tecnick\Barcode\Type\Linear\KlantIndex' => 'libraries/Tecnick/Barcode/Type/Linear/KlantIndex.php',
    'Com\Tecnick\Barcode\Type\Linear\PharmaTwoTracks' => 'libraries/Tecnick/Barcode/Type/Linear/PharmaTwoTracks.php',
    'Com\Tecnick\Barcode\Type\Linear\RoyalMailFourCc' => 'libraries/Tecnick/Barcode/Type/Linear/RoyalMailFourCc.php',
    'Com\Tecnick\Barcode\Type\Linear\UpcE' => 'libraries/Tecnick/Barcode/Type/Linear/UpcE.php',
    'Com\Tecnick\Barcode\Type\Linear\CodeOneOne' => 'libraries/Tecnick/Barcode/Type/Linear/CodeOneOne.php',
    'Com\Tecnick\Barcode\Type\Linear\CodeThreeNineExtCheck' => 'libraries/Tecnick/Barcode/Type/Linear/CodeThreeNineExtCheck.php',
    'Com\Tecnick\Barcode\Type\Linear\EanFive' => 'libraries/Tecnick/Barcode/Type/Linear/EanFive.php',
    'Com\Tecnick\Barcode\Type\Linear\ImbPre' => 'libraries/Tecnick/Barcode/Type/Linear/ImbPre.php',
    'Com\Tecnick\Barcode\Type\Linear\MsiCheck' => 'libraries/Tecnick/Barcode/Type/Linear/MsiCheck.php',
    'Com\Tecnick\Barcode\Type\Linear\Planet' => 'libraries/Tecnick/Barcode/Type/Linear/Planet.php',
    'Com\Tecnick\Barcode\Type\Linear\StandardTwoOfFiveCheck' => 'libraries/Tecnick/Barcode/Type/Linear/StandardTwoOfFiveCheck.php',
    'Com\Tecnick\Barcode\Type\Linear\CodeThreeNineExt' => 'libraries/Tecnick/Barcode/Type/Linear/CodeThreeNineExt.php',
    'Com\Tecnick\Barcode\Type\Linear\EanOneThree' => 'libraries/Tecnick/Barcode/Type/Linear/EanOneThree.php',
    'Com\Tecnick\Barcode\Type\Linear\InterleavedTwoOfFiveCheck' => 'libraries/Tecnick/Barcode/Type/Linear/InterleavedTwoOfFiveCheck.php',
    'Com\Tecnick\Barcode\Type\Linear\Msi' => 'libraries/Tecnick/Barcode/Type/Linear/Msi.php',
    'Com\Tecnick\Barcode\Type\Linear\Postnet' => 'libraries/Tecnick/Barcode/Type/Linear/Postnet.php',
    'Com\Tecnick\Barcode\Type\Linear\StandardTwoOfFive' => 'libraries/Tecnick/Barcode/Type/Linear/StandardTwoOfFive.php',
    'Com\Tecnick\Barcode\Type\Linear\CodeOneTwoEight\CodeOneTwoEightA' => 'libraries/Tecnick/Barcode/Type/Linear/CodeOneTwoEight/CodeOneTwoEightA.php',
    'Com\Tecnick\Barcode\Type\Linear\CodeOneTwoEight\CodeOneTwoEightB' => 'libraries/Tecnick/Barcode/Type/Linear/CodeOneTwoEight/CodeOneTwoEightB.php',
    'Com\Tecnick\Barcode\Type\Linear\CodeOneTwoEight\CodeOneTwoEightC' => 'libraries/Tecnick/Barcode/Type/Linear/CodeOneTwoEight/CodeOneTwoEightC.php',
    'Com\Tecnick\Barcode\Type\Linear\CodeOneTwoEight\Process' => 'libraries/Tecnick/Barcode/Type/Linear/CodeOneTwoEight/Process.php',
    'Com\Tecnick\Barcode\Type\Square\Datamatrix' => 'libraries/Tecnick/Barcode/Type/Square/Datamatrix.php',
    'Com\Tecnick\Barcode\Type\Square\PdfFourOneSeven' => 'libraries/Tecnick/Barcode/Type/Square/PdfFourOneSeven.php',
    'Com\Tecnick\Barcode\Type\Square\QrCode' => 'libraries/Tecnick/Barcode/Type/Square/QrCode.php',
    'Com\Tecnick\Barcode\Type\Square\Raw' => 'libraries/Tecnick/Barcode/Type/Square/Raw.php',
    'Com\Tecnick\Barcode\Type\Square\Datamatrix\Data' => 'libraries/Tecnick/Barcode/Type/Square/Datamatrix/Data.php',
    'Com\Tecnick\Barcode\Type\Square\Datamatrix\Encode' => 'libraries/Tecnick/Barcode/Type/Square/Datamatrix/Encode.php',
    'Com\Tecnick\Barcode\Type\Square\Datamatrix\EncodeTxt' => 'libraries/Tecnick/Barcode/Type/Square/Datamatrix/EncodeTxt.php',
    'Com\Tecnick\Barcode\Type\Square\Datamatrix\ErrorCorrection' => 'libraries/Tecnick/Barcode/Type/Square/Datamatrix/ErrorCorrection.php',
    'Com\Tecnick\Barcode\Type\Square\Datamatrix\Modes' => 'libraries/Tecnick/Barcode/Type/Square/Datamatrix/Modes.php',
    'Com\Tecnick\Barcode\Type\Square\Datamatrix\Placement' => 'libraries/Tecnick/Barcode/Type/Square/Datamatrix/Placement.php',
    'Com\Tecnick\Barcode\Type\Square\Datamatrix\Steps' => 'libraries/Tecnick/Barcode/Type/Square/Datamatrix/Steps.php',
    'Com\Tecnick\Barcode\Type\Square\PdfFourOneSeven\Compaction' => 'libraries/Tecnick/Barcode/Type/Square/PdfFourOneSeven/Compaction.php',
    'Com\Tecnick\Barcode\Type\Square\PdfFourOneSeven\Data' => 'libraries/Tecnick/Barcode/Type/Square/PdfFourOneSeven/Data.php',
    'Com\Tecnick\Barcode\Type\Square\PdfFourOneSeven\Sequence' => 'libraries/Tecnick/Barcode/Type/Square/PdfFourOneSeven/Sequence.php',
    'Com\Tecnick\Barcode\Type\Square\QrCode\ByteStream' => 'libraries/Tecnick/Barcode/Type/Square/QrCode/ByteStream.php',
    'Com\Tecnick\Barcode\Type\Square\QrCode\Data' => 'libraries/Tecnick/Barcode/Type/Square/QrCode/Data.php',
    'Com\Tecnick\Barcode\Type\Square\QrCode\Encode' => 'libraries/Tecnick/Barcode/Type/Square/QrCode/Encode.php',
    'Com\Tecnick\Barcode\Type\Square\QrCode\Encoder' => 'libraries/Tecnick/Barcode/Type/Square/QrCode/Encoder.php',
    'Com\Tecnick\Barcode\Type\Square\QrCode\EncodingMode' => 'libraries/Tecnick/Barcode/Type/Square/QrCode/EncodingMode.php',
    'Com\Tecnick\Barcode\Type\Square\QrCode\Estimate' => 'libraries/Tecnick/Barcode/Type/Square/QrCode/Estimate.php',
    'Com\Tecnick\Barcode\Type\Square\QrCode\Init' => 'libraries/Tecnick/Barcode/Type/Square/QrCode/Init.php',
    'Com\Tecnick\Barcode\Type\Square\QrCode\InputItem' => 'libraries/Tecnick/Barcode/Type/Square/QrCode/InputItem.php',
    'Com\Tecnick\Barcode\Type\Square\QrCode\MaskNum' => 'libraries/Tecnick/Barcode/Type/Square/QrCode/MaskNum.php',
    'Com\Tecnick\Barcode\Type\Square\QrCode\Mask' => 'libraries/Tecnick/Barcode/Type/Square/QrCode/Mask.php',
    'Com\Tecnick\Barcode\Type\Square\QrCode\Spec' => 'libraries/Tecnick/Barcode/Type/Square/QrCode/Spec.php',
    'Com\Tecnick\Barcode\Type\Square\QrCode\SpecRs' => 'libraries/Tecnick/Barcode/Type/Square/QrCode/SpecRs.php',
    'Com\Tecnick\Barcode\Type\Square\QrCode\Split' => 'libraries/Tecnick/Barcode/Type/Square/QrCode/Split.php',
    'Com\Tecnick\Color\Css' => 'libraries/Tecnick/Color/Css.php',
    'Com\Tecnick\Color\Model' => 'libraries/Tecnick/Color/Model.php',
    'Com\Tecnick\Color\Exception' => 'libraries/Tecnick/Color/Exception.php',
    'Com\Tecnick\Color\Pdf' => 'libraries/Tecnick/Color/Pdf.php',
    'Com\Tecnick\Color\Spot' => 'libraries/Tecnick/Color/Spot.php',
    'Com\Tecnick\Color\Web' => 'libraries/Tecnick/Color/Web.php',
    'Com\Tecnick\Color\Model\Cmyk' => 'libraries/Tecnick/Color/Model/Cmyk.php',
    'Com\Tecnick\Color\Model\Gray' => 'libraries/Tecnick/Color/Model/Gray.php',
    'Com\Tecnick\Color\Model\Hsl' => 'libraries/Tecnick/Color/Model/Hsl.php',
    'Com\Tecnick\Color\Model\Rgb' => 'libraries/Tecnick/Color/Model/Rgb.php',
    'Com\Tecnick\Color\Model\Template' => 'libraries/Tecnick/Color/Model/Template.php',
  );
}

use Com\Tecnick\Barcode\Barcode as BarcodeGenerator;

/**
 * Implements hook_block_info().
 */
function barcodes_block_info() {
  $blocks['barcode'] = array(
    'info' => t('Barcode'),
    'cache' => BACKDROP_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function barcodes_block_configure($delta = '') {
  $form = array();
  if ($delta === 'barcode') {
    $generator = new BarcodeGenerator();
    $form['settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Barcode settings'),
    );
    $form['settings']['value'] = [
      '#type' => 'textfield',
      '#title' => t('Value'),
      '#description' => t('The Barcode value.'),
      '#default_value' => variable_get('barcodes_value', ''),
    ];
    if (module_exists('token')) {
      $form['settings']['value'] += [
        '#element_validate' => array('token_element_validate'),
        '#token_types' => array(),
      ];
      $form['settings']['token_help'] = [
        '#theme' => 'token_tree_link',
        '#token_types' => [],
      ];
    }
    $form['settings']['type'] = [
      '#type' => 'select',
      '#title' => t('Barcode Type'),
      '#description' => t('The Barcode type.'),
      '#options' => array_combine($generator->getTypes(), $generator->getTypes()),
      '#default_value' => variable_get('barcodes_type', 'QRCODE'),
    ];
    $form['settings']['color'] = [
      '#type' => 'textfield',
      '#title' => t('Color'),
      '#default_value' => variable_get('barcodes_color', '#000000'),
      '#description' => t('The color code.'),
    ];
    $form['settings']['height'] = [
      '#type' => 'textfield',
      '#title' => t('Height'),
      '#size' => 10,
      '#default_value' => variable_get('barcodes_height', 100),
      '#description' => t('The height in pixels.'),
    ];
    $form['settings']['width'] = [
      '#type' => 'textfield',
      '#title' => t('Width'),
      '#size' => 10,
      '#default_value' => variable_get('barcodes_width', 100),
      '#description' => t('The width in pixels'),
    ];
    $form['settings']['padding_top'] = [
      '#type' => 'textfield',
      '#title' => t('Padding-Top'),
      '#size' => 4,
      '#maxlength' => 4,
      '#default_value' => variable_get('barcodes_padding_top', 0),
      '#description' => t('The top padding in pixels'),
    ];
    $form['settings']['padding_right'] = [
      '#type' => 'textfield',
      '#title' => t('Padding-Right'),
      '#size' => 4,
      '#maxlength' => 4,
      '#default_value' => variable_get('barcodes_padding_right', 0),
      '#description' => t('The right padding in pixels'),
    ];
    $form['settings']['padding_bottom'] = [
      '#type' => 'textfield',
      '#title' => t('Padding-Bottom'),
      '#size' => 4,
      '#maxlength' => 4,
      '#default_value' => variable_get('barcodes_padding_bottom', 0),
      '#description' => t('The bottom padding in pixels'),
    ];
    $form['settings']['padding_left'] = [
      '#type' => 'textfield',
      '#title' => t('Padding-Left'),
      '#size' => 4,
      '#maxlength' => 4,
      '#default_value' => variable_get('barcodes_padding_left', 0),
      '#description' => t('The left padding in pixels'),
    ];
    $form['settings']['show_value'] = [
      '#type' => 'checkbox',
      '#title' => t('Show value'),
      '#default_value' => variable_get('barcodes_show_value', FALSE),
      '#description' => t('Show the actual value in addition to the barcode'),
    ];
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function barcodes_block_save($delta = '', $edit = array()) {
  if ($delta == 'barcode') {
    variable_set('barcodes_value', $edit['value']);
    variable_set('barcodes_type', $edit['type']);
    variable_set('barcodes_color', $edit['color']);
    variable_set('barcodes_height', $edit['height']);
    variable_set('barcodes_width', $edit['width']);
    variable_set('barcodes_padding_top', $edit['padding_top']);
    variable_set('barcodes_padding_right', $edit['padding_right']);
    variable_set('barcodes_padding_bottom', $edit['padding_bottom']);
    variable_set('barcodes_padding_left', $edit['padding_left']);
    variable_set('barcodes_show_value', $edit['show_value']);
  }
}

/**
 * Implements hook_block_view().
 */
function barcodes_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'barcode':
      $block['subject'] = t('Barcode');
      $generator = new BarcodeGenerator();
      $suffix = str_replace(
        '+', 'plus', strtolower(variable_get('barcodes_type', 'QRCODE'))
      );
      $value = variable_get('barcodes_value', '');
      if (module_exists('token')) {
        $value = token_replace($value);
      }
      $block['content'] = array(
        '#theme' => 'barcode__' . $suffix,
        '#attached' => array(
          'css' => array(
            backdrop_get_path('module', 'barcodes') . '/css/' . $suffix . '.css',
          ),
        ),
        '#type' => variable_get('barcodes_type', 'QRCODE'),
        '#value' => check_plain($value),
        '#width' => variable_get('barcodes_width', 100),
        '#height' => variable_get('barcodes_height', 100),
        '#color' => variable_get('barcodes_color', '#000000'),
        '#padding_top' => variable_get('barcodes_padding_top', 0),
        '#padding_right' => variable_get('barcodes_padding_right', 0),
        '#padding_bottom' => variable_get('barcodes_padding_bottom', 0),
        '#padding_left' => variable_get('barcodes_padding_left', 0),
        '#show_value' => variable_get('barcodes_show_value', FALSE),
      );

      try {
        $barcode = $generator->getBarcodeObj(
          variable_get('barcodes_type', 'QRCODE'),
          $value,
          variable_get('barcodes_width', 100),
          variable_get('barcodes_height', 100),
          variable_get('barcodes_color', '#000000'),
          array(
            variable_get('barcodes_padding_top', 0),
            variable_get('barcodes_padding_right', 0),
            variable_get('barcodes_padding_bottom', 0),
            variable_get('barcodes_padding_left', 0),
          )
        );
        $block['content']['#svg'] = $barcode->getSvgCode();
      }
      catch (\Exception $e) {
        watchdog(
          'barcodes',
          'Error: @error, given: @value',
          array(
            '@error' => $e->getMessage(),
            '@value' => $value,
          )
        );
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_field_formatter_info().
 */
function barcodes_field_formatter_info() {
  return array(
    'barcode' => array(
      'label' => t('Barcode'),
      'description' => t('Render the value as barcode.'),
      'field types' => array(
        'email',
        'link_field',
        'number_integer',
        'string',
        'phone',
        'text',
        'text_long',
        'text_with_summary',
      ),
      'settings' => array(
        'type' => 'QRCODE',
        'color' => '#000000',
        'height' => 100,
        'width' => 100,
        'padding_top' => 0,
        'padding_right' => 0,
        'padding_bottom' => 0,
        'padding_left' => 0,
        'show_value' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function barcodes_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $elements = array();
  $elements['#tree'] = TRUE;
  if ($display['type'] == 'barcode') {
    $generator = new BarcodeGenerator();
    $elements['type'] = [
      '#type' => 'select',
      '#title' => t('Barcode Type'),
      '#description' => t('The Barcode type.'),
      '#options' => array_combine($generator->getTypes(), $generator->getTypes()),
      '#default_value' => $settings['type'],
    ];
    $elements['color'] = [
      '#type' => 'textfield',
      '#title' => t('Color'),
      '#default_value' => $settings['color'],
      '#description' => t('The color code.'),
    ];
    $elements['height'] = [
      '#type' => 'textfield',
      '#title' => t('Height'),
      '#size' => 10,
      '#default_value' => $settings['height'],
      '#description' => t('The height in pixels.'),
    ];
    $elements['width'] = [
      '#type' => 'textfield',
      '#title' => t('Width'),
      '#size' => 10,
      '#default_value' => $settings['width'],
      '#description' => t('The width in pixels'),
    ];
    $elements['padding_top'] = [
      '#type' => 'textfield',
      '#title' => t('Padding-Top'),
      '#size' => 4,
      '#maxlength' => 4,
      '#default_value' => $settings['padding_top'],
      '#description' => t('The top padding in pixels'),
    ];
    $elements['padding_right'] = [
      '#type' => 'textfield',
      '#title' => t('Padding-Right'),
      '#size' => 4,
      '#maxlength' => 4,
      '#default_value' => $settings['padding_right'],
      '#description' => t('The right padding in pixels'),
    ];
    $elements['padding_bottom'] = [
      '#type' => 'textfield',
      '#title' => t('Padding-Bottom'),
      '#size' => 4,
      '#maxlength' => 4,
      '#default_value' => $settings['padding_bottom'],
      '#description' => t('The bottom padding in pixels'),
    ];
    $elements['padding_left'] = [
      '#type' => 'textfield',
      '#title' => t('Padding-Left'),
      '#size' => 4,
      '#maxlength' => 4,
      '#default_value' => $settings['padding_left'],
      '#description' => t('The left padding in pixels'),
    ];
    $elements['show_value'] = [
      '#type' => 'checkbox',
      '#title' => t('Show value'),
      '#default_value' => $settings['show_value'],
      '#description' => t('Show the actual value in addition to the barcode'),
    ];
  }
  return $elements;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function barcodes_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';
  if ($display['type'] === 'barcode') {
    $summary = t(
      'Type: @type',
      array(
        '@type' => isset($settings['type']) ? $settings['type'] : t('none'),
      )
    );
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function barcodes_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'barcode':
      $generator = new BarcodeGenerator();
      foreach ($items as $delta => $item) {
        $suffix = str_replace(
          '+', 'plus', strtolower($settings['type'])
        );

        if (!isset($item['value'])) {
          $value = $item['url'];
        }
        else {
          $value = $item['value'];
        }

        if (module_exists('token')) {
          $value = token_replace($value);
        }
        $elements[$delta] = array(
          '#theme' => 'barcode__' . $suffix,
          '#attached' => array(
            'library' => array(
              'barcodes/' . $suffix,
            ),
          ),
          '#type' => $settings['type'],
          '#value' => check_plain($value),
          '#width' => $settings['width'],
          '#height' => $settings['height'],
          '#color' => $settings['color'],
          '#padding_top' => $settings['padding_top'],
          '#padding_right' => $settings['padding_right'],
          '#padding_bottom' => $settings['padding_bottom'],
          '#padding_left' => $settings['padding_left'],
          '#show_value' => $settings['show_value'],
        );

        try {
          $barcode = $generator->getBarcodeObj(
            $settings['type'],
            $value,
            $settings['width'],
            $settings['height'],
            $settings['color'],
            array(
              $settings['padding_top'],
              $settings['padding_right'],
              $settings['padding_bottom'],
              $settings['padding_left'],
            )
          );
          $elements[$delta]['#svg'] = $barcode->getSvgCode();
        }
        catch (\Exception $e) {
          watchdog(
            'barcodes',
            'Error: @error, given: @value',
            array(
              '@error' => $e->getMessage(),
              '@value' => $value,
            )
          );
        }
      }
      break;
  }
  return $elements;
}

/**
 * Implements hook_theme().
 */
function barcodes_theme($existing, $type, $theme, $path) {
  $generator = new BarcodeGenerator();
  $barcode = array(
    'variables' => array(
      'svg' => NULL,
      'type' => NULL,
      'value' => NULL,
      'width' => NULL,
      'height' => NULL,
      'color' => NULL,
      'padding_top' => NULL,
      'padding_right' => NULL,
      'padding_bottom' => NULL,
      'padding_left' => NULL,
      'show_value' => NULL,
    ),
  );
  $items = array();
  $items['barcode'] = $barcode;
  $items['barcode']['template'] = 'barcode';
  $items['barcode']['path'] = backdrop_get_path('module', 'barcodes') . '/templates';
  foreach ($generator->getTypes() as $type) {
    $suffix = str_replace(
      '+', 'plus', strtolower($type)
    );
    $items['barcode__' . strtolower($type)] = $barcode;
    $items['barcode__' . strtolower($type)]['template'] = 'barcode--' . $suffix;
    $items['barcode__' . strtolower($type)]['path'] = backdrop_get_path('module', 'barcodes') . '/templates';
  }
  return $items;
}
